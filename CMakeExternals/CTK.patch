diff --git a/CMakeExternals/PythonQt.cmake b/CMakeExternals/PythonQt.cmake
index 806797b..b70005d 100644
--- a/CMakeExternals/PythonQt.cmake
+++ b/CMakeExternals/PythonQt.cmake
@@ -33,7 +33,7 @@ if(NOT DEFINED PYTHONQT_INSTALL_DIR)
 
   # Enable Qt libraries PythonQt wrapping if required
   if (CTK_QT_VERSION VERSION_GREATER "4")
-    set(qtlibs Core Gui Widgets Network OpenGL PrintSupport Sql Svg UiTools WebKit WebKitWidgets Xml)
+    set(qtlibs Core Gui Widgets Network OpenGL PrintSupport Sql Svg UiTools Xml)
   else()
     list(APPEND ep_PythonQt_args
       -DQT_QMAKE_EXECUTABLE:FILEPATH=${QT_QMAKE_EXECUTABLE}
@@ -88,10 +88,10 @@ if(NOT DEFINED PYTHONQT_INSTALL_DIR)
     BUILD_COMMAND ""
     CMAKE_CACHE_ARGS
       ${ep_common_cache_args}
-      -DQT_QMAKE_EXECUTABLE:FILEPATH=${QT_QMAKE_EXECUTABLE}
       -DPYTHON_INCLUDE_DIR:PATH=${PYTHON_INCLUDE_DIR}
       -DPYTHON_INCLUDE_DIR2:PATH=${PYTHON_INCLUDE_DIR2}
       -DPYTHON_LIBRARY:FILEPATH=${PYTHON_LIBRARY}
+      -DCMAKE_DEBUG_POSTFIX:STRING=${PYTHONQT_DEBUG_POSTFIX}
       ${ep_PythonQt_args}
     DEPENDS
       ${${proj}_DEPENDENCIES}
@@ -111,6 +111,7 @@ mark_as_superbuild(
     PYTHON_INCLUDE_DIR:PATH # FindPythonQt expects PYTHON_INCLUDE_DIR variable to be defined
     PYTHON_INCLUDE_DIR2:PATH
     PYTHON_LIBRARY:FILEPATH # FindPythonQt expects PYTHON_LIBRARY variable to be defined
+	PYTHONQT_DEBUG_POSTFIX:STRING
   LABELS "FIND_PACKAGE_VARS"
   )
 mark_as_superbuild(
diff --git a/Utilities/CMake/FindPythonQt.cmake b/Utilities/CMake/FindPythonQt.cmake
index 5e61d97..1d3fc28 100644
--- a/Utilities/CMake/FindPythonQt.cmake
+++ b/Utilities/CMake/FindPythonQt.cmake
@@ -22,7 +22,7 @@ find_path(PYTHONQT_INCLUDE_DIR PythonQt.h
         "${PYTHONQT_INSTALL_DIR}/src"
   DOC "Path to the PythonQt include directory")
 find_library(PYTHONQT_LIBRARY_RELEASE PythonQt PATHS "${PYTHONQT_INSTALL_DIR}/lib" DOC "The PythonQt library.")
-find_library(PYTHONQT_LIBRARY_DEBUG NAMES PythonQt${CTK_CMAKE_DEBUG_POSTFIX} PythonQt${CMAKE_DEBUG_POSTFIX} PythonQt PATHS "${PYTHONQT_INSTALL_DIR}/lib" DOC "The PythonQt library.")
+find_library(PYTHONQT_LIBRARY_DEBUG NAMES PythonQt${PYTHONQT_DEBUG_POSTFIX} PythonQt${CTK_CMAKE_DEBUG_POSTFIX} PythonQt${CMAKE_DEBUG_POSTFIX} PythonQt PATHS "${PYTHONQT_INSTALL_DIR}/lib" DOC "The PythonQt library.")
 set(PYTHONQT_LIBRARY)
 if(PYTHONQT_LIBRARY_RELEASE)
   list(APPEND PYTHONQT_LIBRARY optimized ${PYTHONQT_LIBRARY_RELEASE})
diff --git a/CMake/ctkMacroSetupQt.cmake b/CMake/ctkMacroSetupQt.cmake
index 0b5d89c..c26b2ba 100644
--- a/CMake/ctkMacroSetupQt.cmake
+++ b/CMake/ctkMacroSetupQt.cmake
@@ -73,8 +73,6 @@ macro(ctkMacroSetupQt)
       message(FATAL_ERROR "error: Qt4 was not found on your system. You probably need to set the QT_QMAKE_EXECUTABLE variable")
     endif()
 
-  else()
-    message(FATAL_ERROR "error: Qt4 was not found on your system. You probably need to set the QT_QMAKE_EXECUTABLE variable")
   endif()
 
   mark_as_superbuild(CTK_QT_VERSION)
diff --git a/Libs/Scripting/Python/Core/ctkAbstractPythonManager.cpp b/Libs/Scripting/Python/Core/ctkAbstractPythonManager.cpp
index 66f5240..547f5e6 100644
--- a/Libs/Scripting/Python/Core/ctkAbstractPythonManager.cpp
+++ b/Libs/Scripting/Python/Core/ctkAbstractPythonManager.cpp
@@ -28,10 +28,7 @@
 
 // PythonQT includes
 #include <PythonQt.h>
-
-#if QT_VERSION < QT_VERSION_CHECK(5, 0, 0)
-  #include <PythonQt_QtBindings.h>
-#endif
+#include <PythonQt_QtBindings.h>
 
 // STD includes
 #include <csignal>
@@ -155,9 +152,7 @@ void ctkAbstractPythonManager::initPythonQt(int flags)
   this->connect(PythonQt::self(), SIGNAL(pythonStdErr(QString)),
                 SLOT(printStderr(QString)));
 
-#if QT_VERSION < QT_VERSION_CHECK(5, 0, 0)
   PythonQt_init_QtBindings();
-#endif
 
   QStringList initCode;
 
diff --git a/Libs/Widgets/ctkConsole.cpp b/Libs/Widgets/ctkConsole.cpp
index cad9211..308d090 100644
--- a/Libs/Widgets/ctkConsole.cpp
+++ b/Libs/Widgets/ctkConsole.cpp
@@ -108,12 +108,12 @@ void ctkConsolePrivate::init()
   this->setAcceptRichText(false);
   this->setUndoRedoEnabled(false);
 
-  this->PromptColor = QColor(0, 0, 0);    // Black
+  this->PromptColor = QColor(Qt::gray);    
   this->OutputTextColor = QColor(0, 150, 0);  // Green
   this->ErrorTextColor = QColor(255, 0, 0);   // Red
   this->StdinTextColor = QColor(Qt::darkGray);
-  this->CommandTextColor = QColor(0, 0, 150); // Blue
-  this->WelcomeTextColor = QColor(0, 0, 255); // Dark Blue
+  this->CommandTextColor = QColor(138, 43, 226); // BlueViolet
+  this->WelcomeTextColor = QColor(123, 104, 238); // MedumSlateBlue
 
   QFont shellFont;
   shellFont.setFamily("Courier");
-- 
1.8.4.msysgit.0

